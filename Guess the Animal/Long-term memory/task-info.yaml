type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "file-formats"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) {
            return new Scenario(script).check();
        }

        @DynamicTest
        CheckResult testFileFormats() {
            deleteTestFiles();
            final var result = new Scenario("file-formats").check();
            deleteTestFiles();
            return result;
        }

        private void deleteTestFiles() {
            Stream.of("yaml", "json", "xml")
                    .map("animals."::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: src/animals/Animal.java
  visible: true
  text: |
    package animals;

    public class Animal {
        final public String article;
        final public String name;

        public Animal(String article, String name) {
            this.article = article;
            this.name = name;
        }

        public String nameWithArticle() {
            return article + " " + name;
        }

        @Override
        public String toString() {
            return "Animal{" + "'" + article + " " + name + "'}";
        }
    }
  learner_created: true
- name: src/utils/Util.java
  visible: true
  text: |
    package utils;

    import animals.Animal;

    import java.util.Arrays;
    import java.util.Calendar;
    import java.util.List;
    import java.util.Scanner;

    public class Util {
        public static String getArticle(String word) {
            String article;
            if ("aoeiu".contains(word.substring(0, 1))) {
                article = "an";
            } else {
                article = "a";
            }
            return article;
        }

        public static Animal enterAnimal(String prompt) {
            Scanner scanner = new Scanner(System.in);
            System.out.println(prompt);
            String[] input = scanner.nextLine().toLowerCase().split(" ", 2);
            String animal;
            String article;
            if (input.length > 1) {
                if (input[0].equals("a") || input[0].equals("an")) {
                    article = input[0];
                    animal = input[1];
                } else if (input[0].equals("the")) {
                    article = getArticle(input[1]);
                    animal = input[1];
                } else {
                    article = getArticle(input[0]);
                    animal = input[0] + " " + input[1];
                }
            } else {
                article = getArticle(input[0]);
                animal = input[0];
            }
            return new Animal(article, animal);
        }

        public static String getAnswer(String question) {
            Scanner scanner = new Scanner(System.in);
            List<String> positiveAnswers = Arrays.asList(
                    "y", "yes", "yeah", "yep", "sure", "right",
                    "affirmative", "correct", "indeed", "you bet",
                    "exactly", "you said it");
            List<String> negativeAnswers = Arrays.asList(
                    "n", "no", "no way", "nah", "nope", "negative",
                    "i don't think so", "yeah no"
            );
            String[] dontUnderstands = {
                    "I'm not sure I caught you: was it yes or no?",
                    "Funny, I still don't understand, is it yes or no?",
                    "Oh, it's too complicated for me: just tell me yes or no.",
                    "Could you please simply say yes or no?",
                    "Oh, no, don't try to confuse me: say yes or no."
            };
            System.out.println(question);
            while (true) {
                String answer = scanner.nextLine()
                        .trim()
                        .toLowerCase()
                        .replaceAll("[.!]$", "");
                if (positiveAnswers.contains(answer)) {
                    return "Yes";
                } else if (negativeAnswers.contains(answer)) {
                    return "No";
                }
                System.out.println(Util.getRandomLine(dontUnderstands));
            }
        }

        public static String getRandomLine(String[] lines) {
            return lines[(int) (Math.random() * lines.length)];
        }

        public static String question(String verb) {
            if (verb.equals("has")) return "does";
            return verb;
        }

        public static String negative(String verb) {
            if (verb.equals("can")) return "can't";
            if (verb.equals("has")) return "doesn't have";
            return "isn't";
        }

        public static void greetings() {
            Calendar calendar = Calendar.getInstance();
            int hours = calendar.get(Calendar.HOUR_OF_DAY);
            if (hours >= 5 && hours < 12) {
                System.out.println("Good morning");
            } else if (hours > 12 && hours < 18) {
                System.out.println("Good afternoon");
            } else {
                System.out.println("Good evening");
            }
        }

        public static void bye() {
            String[] byes = {
                    "Have a nice day!",
                    "See you soon!",
                    "Bye!",
                    "Пока",
                    "Aufwiedesein"
            };
            System.out.println(getRandomLine(byes));
        }
    }
  learner_created: true
- name: src/animals/AnimalKnowledgeTree.java
  visible: true
  text: |
    package animals;


    import animals.Animal;
    import utils.Util;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class AnimalKnowledgeTree {
        static class Node {
            String fact;
            Animal animal;
            Node parent;
            Node yes;
            Node no;

            public Node(String fact, Node parent) {
                this.parent = parent;
                this.fact = fact;
                this.animal = null;
            }
            public Node(Animal animal, Node parent) {
                this.parent = parent;
                this.fact = null;
                this.animal = animal;
            }

            @Override
            public String toString() {
                return "fact='" + fact + '\'' + ", animal=" + animal;
            }
        }

        Node root;
        Node current;

        void enterFact(Animal animal2) {
            Scanner scanner = new Scanner(System.in);
            String result = "";
            Animal animal1 = current.animal;
            while (true) {
                System.out.println("Specify a fact that distinguishes " +
                        animal1.nameWithArticle() + " from " + animal2.nameWithArticle() + ".\n" +
                        "The sentence should be of the format: 'It can/has/is ...'.");
                String input = scanner.nextLine().trim().toLowerCase();
                Pattern pattern = Pattern.compile("^it\\s+(can|has|is)\\s+(.+)");
                Matcher matcher = pattern.matcher(input);
                if (matcher.matches()) {
                    String verb = matcher.group(1);
                    String fact = matcher.group(2);
                    if (verb.equals("has") || verb.equals("is")) {
    //                    fact = getArticle(fact);
                    }
                    String answer = Util.getAnswer("Is it correct for " + animal2.nameWithArticle() + "?");
                    verb = Util.question(verb);
                    result = verb.substring(0, 1).toUpperCase() + verb.substring(1) + " it " + (verb.equals("does") ? "have " : "") + fact + "?";
                    System.out.println("I learned the following facts about animals:");
                    if (answer.equals("Yes")) {
                        System.out.println("- The " + animal1.name + " " + Util.negative(verb) + " " + fact + ".");
                        System.out.println("- The " + animal2.name + " " + verb + " " + fact + ".");
                    } else {
                        System.out.println("- The " + animal1.name + " " + verb + " " + fact + ".");
                        System.out.println("- The " + animal2.name + " " + Util.negative(verb) + " " + fact + ".");
                    }

                    insertFactAndNewAnimal(result, animal2, answer.equals("Yes"));

                    System.out.println("I can distinguish these animals by asking the question:");
                    System.out.println("- " + result);
                    System.out.println("Nice! I've learned so much about animals!");
                    break;
                } else {
                    System.out.println("The examples of a statement:\n" +
                            " - It can fly\n" +
                            " - It has horn\n" +
                            " - It is a mammal");
                }
            }
        }

        public boolean processAnswer(String answer) {
            System.err.println(current + " -> " + answer);
            if (answer.equals("Yes")) {
                System.err.println(current.yes);
                if (current.animal != null) {
                    // game over
                    return true;
                } else if (current.yes == null) {
                    Animal animal2 = Util.enterAnimal("I give up. What animal do you have in mind?");
                    enterFact(animal2);
                    return true;
                } else if (current.yes.animal != null) {
    //                System.out.println(askAboutAnimal(current.yes.animal));
                    current = current.yes;
                    return false;
                } else {
                    // next question
    //                System.out.println(askQuestion(current.yes.fact));
                    current = current.yes;
                    return false;
                }
            } else {
                System.err.println(current.no);
                if (current.no == null) {
                    Animal animal2 = Util.enterAnimal("I give up. What animal do you have in mind?");
                    enterFact(animal2);
                    return true;
                } else if (current.no.animal != null) {
    //                System.out.println(askAboutAnimal(current.no.animal));
                    current = current.no;
                    return false;
                } else {
                    // next question
    //                System.out.println(askQuestion(current.no.fact));
                    current = current.no;
                    return false;
                }
            }
        }

        public void startGame() {
            System.err.println("Start new game");
            current = root;
            if (current == null) {
                System.err.println("empty tree");
            } else if (current.fact != null) {
                System.err.println("fact: " + current.fact);
            } else if (current.animal != null) {
                System.err.println("animal: " + current.animal.name);
            }
        }

        public String getQuestion() {
            String result = "";
            if (current.yes == null) {
                result = askAboutAnimal(current.animal);
            } else {
                result = askQuestion(current.fact);
            }
            return result;
        }

        private String askQuestion(String fact) {
            return fact;
        }

        private String askAboutAnimal(Animal animal) {
            return "Is it " + animal.article + " " + animal.name + "?";
        }

        public void insertFactAndNewAnimal(String fact, Animal secondAnimal, boolean isTrue) {
            Node newFact = new Node(fact, current.parent);
            if (isTrue) {
                newFact.yes = new Node(secondAnimal, newFact);
                newFact.no = current;
            } else {
                newFact.no = new Node(secondAnimal, newFact);
                newFact.yes = current;
            }
            if (current.parent == null) {
                root = newFact;
            } else {
                if (current.parent.yes == current) {
                    current.parent.yes = newFact;
                } else {
                    current.parent.no = newFact;
                }
            }
            current.parent = newFact;
        }

        public void insertAnimal(Animal animal) {
            root = new Node(animal, null);
        }


    }
  learner_created: true
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [matches, "(?si).*animal.*", The program should asks the user for a favourite animal]
    - [input, cat]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, Yes]
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    - - file exists
      - "animals.{0}"
      - When the program started with option "java -type {0}" the data should be saved to "animals.{0}"

    #
    # Start the program again and load the Knowledge Tree
    #

    - [start, "-type {0}"]
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""]
    #
    # The third game started. Test for the Knowledge Tree.
    #
    - - contains
      - Can it climbs tree?
      - The root question in knowledge tree should be "Can it climbs tree?"
    - [input, yes]
    - - contains
      - Is it living in the forest?
      - The second question should be 'Is it living in the forest?'
    - [input, sure]
    - - contains
      - Is it a lynx?
      - The last question should be 'Is it a lynx?'
    - [input, right]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    #
    # Clear workspace after the test
    #
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."

  learner_created: false
feedback_link: https://hyperskill.org/projects/132/stages/706/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 22 Aug 2021 14:02:26 UTC
record: 4
